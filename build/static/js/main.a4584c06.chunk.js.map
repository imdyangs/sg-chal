{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["JobTab","job","jobs","useState","renderDescription","setRenderDescription","className","style","backgroundColor","onClick","title","company","name","citiesString","Intl","DateTimeFormat","year","month","day","format","postedAt","description","window","open","websiteUrl","App","handleChange","e","preventDefault","setState","locationSearch","target","value","state","debouncedSetDisplayedJobs","filteredJobs","filter","toLowerCase","includes","displayedJobs","jobsLoaded","func","wait","timeout","args","context","this","clearTimeout","setTimeout","apply","debounce","opts","method","headers","body","JSON","stringify","query","fetch","then","res","json","map","cities","length","city","join","Date","cleanData","data","sort","a","b","sortJobsByRecentDate","catch","console","error","onChange","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4584c06.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport './App.css';\n\nconst url = \"https://api.graphql.jobs/\"\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\"\n    }\n    else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    }\n    else {\n      job.cities = job.cities.map(city => city.name)\n      job.citiesString = job.cities.join(\" • \")\n    }\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  })\n}\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  })\n}\n\nconst JobTab = ({ job, jobs }) => {\n  const [renderDescription, setRenderDescription] = useState(false);\n  return (\n    <div className=\"job-tab\" style={{ backgroundColor: renderDescription ? 'rgb(131 130 140 / 10%)' : null }}>\n      <div className=\"job-vis\" onClick={() => setRenderDescription(!renderDescription)}>\n        <div className=\"job-header\">\n        <div className=\"job-title\">\n          {job.title} • <b>{job.company.name}</b>\n        </div>\n        <div className=\"job-location\">\n          {job.citiesString} • {new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"2-digit\"\n          }).format(job.postedAt)}\n        </div>\n      </div>\n       { renderDescription ?\n        <div className=\"job-description\">\n          <div className=\"job-description-title\">Description</div>\n          <ReactMarkdown>\n            {job.description}\n          </ReactMarkdown>\n          <div className=\"job-contact\">\n            <div className=\"job-application-btn\" onClick={() => window.open(job.company.websiteUrl)}>\n              Apply Here\n            </div>\n          </div>\n        </div> :\n        null\n       }\n    </div>\n  </div>\n)}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [],\n      displayedJobs: [],\n      locationSearch: '',\n      jobsLoaded: false,\n    }\n    this.debouncedSetDisplayedJobs = debounce(jobs => {\n      this.setState({ displayedJobs: jobs })\n    }, 150);\n  }\n\n  componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    };\n\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(({ data }) => {\n        let jobs = cleanData(data.jobs);\n        jobs = sortJobsByRecentDate(jobs);\n        this.setState({ jobs, displayedJobs: jobs, jobsLoaded: true });\n      })\n      .catch(console.error);\n  }\n\n  handleChange = e => {\n    e.preventDefault();\n\n    this.setState({ locationSearch: e.target.value }, () => {\n      if (this.state.locationSearch === '') {\n        this.debouncedSetDisplayedJobs(this.state.jobs)\n        // this.setState({ displayedJobs: this.state.jobs });\n      } else {\n        const filteredJobs = this.state.jobs.filter(job => job.citiesString.toLowerCase().includes(e.target.value));\n        this.debouncedSetDisplayedJobs(filteredJobs)\n        // this.setState({ displayedJobs: filteredJobs });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"title\">\n            Walmart AngelList\n          </div>\n          <div className=\"job-filters\">\n            Search jobs by city {\" \"}\n            <input className=\"job-location-search\" value={this.state.locationSearch} onChange={this.handleChange} />\n          </div>\n          <div className=\"open-positions\">\n            Open Positions\n          </div>\n          <div className=\"job-content\">\n             { this.state.displayedJobs.length !== 0 || this.state.jobsLoaded ?\n              this.state.displayedJobs.map(job => <JobTab key={job.id} job={job} jobs={this.state.jobs} />) :\n              <div className=\"loader\" /> }\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// Helpers\nfunction debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}