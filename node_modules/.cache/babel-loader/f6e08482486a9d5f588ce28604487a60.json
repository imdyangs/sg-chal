{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/imdyangs/projects/shogun/src/App.js\";\nimport React from 'react';\nimport './App.css';\nconst url = \"https://api.graphql.jobs/\";\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) job.cities[0] = 'No City';\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  });\n};\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  });\n};\n\nconst JobTab = job => {\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    className: \"job-tab\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-company\",\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-metadata\",\n        children: \"Full Stack JavaScript Developer Developer \\u2022 San Francisco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n\n_c = JobTab;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: []\n    };\n  }\n\n  async componentDidMount() {\n    const query = `\n      query {\n        jobs {\n          id\n          title\n          cities {\n            name\n            id\n          }\n          description\n          company {\n            id\n            name\n            websiteUrl\n          }\n          postedAt\n        }\n      }\n    `;\n    const opts = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    fetch(url, opts).then(res => res.json()).then(({\n      data\n    }) => {\n      let jobs = cleanData(data.jobs);\n      jobs = sortJobsByRecentDate(jobs);\n      this.setState({\n        jobs\n      }, console.log(this.state));\n    }).catch(console.error);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-content\",\n          children: /*#__PURE__*/_jsxDEV(JobTab, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobTab\");","map":{"version":3,"sources":["/Users/imdyangs/projects/shogun/src/App.js"],"names":["React","url","cleanData","jobs","map","job","cities","length","postedAt","Date","sortJobsByRecentDate","sort","a","b","JobTab","App","Component","constructor","state","componentDidMount","query","opts","method","headers","body","JSON","stringify","fetch","then","res","json","data","setState","console","log","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nconst url = \"https://api.graphql.jobs/\"\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) job.cities[0] = 'No City';\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  })\n}\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  })\n}\n\nconst JobTab = job => {\n  <div className=\"job-tab\">\n    <div className=\"job-header\">\n        <div className=\"job-company\">\n        Google\n      </div>\n      <div className=\"job-metadata\">\n        Full Stack JavaScript Developer Developer â€¢ San Francisco\n      </div>\n    </div>\n  </div>\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [],\n    }\n  }\n\n  async componentDidMount() {\n    const query = `\n      query {\n        jobs {\n          id\n          title\n          cities {\n            name\n            id\n          }\n          description\n          company {\n            id\n            name\n            websiteUrl\n          }\n          postedAt\n        }\n      }\n    `\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    };\n\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(({ data }) => {\n        let jobs = cleanData(data.jobs);\n        jobs = sortJobsByRecentDate(jobs);\n        this.setState({\n          jobs,\n        }, console.log(this.state));\n      })\n      .catch(console.error);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"title\">\n            Jobs\n          </div>\n          <div className=\"job-content\">\n            <JobTab />\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}