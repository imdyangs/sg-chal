{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/imdyangs/projects/shogun/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './App.css';\nconst url = \"https://api.graphql.jobs/\";\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`;\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\";\n    } else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    } else {\n      job.cities = job.cities.map(city => city.name);\n      job.citiesString = job.cities.join(\" â€¢ \");\n    }\n\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  });\n};\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  });\n};\n\nconst sortJobsByCity = jobs => {\n  return jobs.sort((a, b) => {\n    return a.citiesString - b.citiesString;\n  });\n};\n\nconst JobTab = ({\n  job,\n  jobs\n}) => {\n  _s();\n\n  const [renderDescription, setRenderDescription] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"job-tab\",\n    style: {\n      backgroundColor: renderDescription ? 'rgb(131 130 140 / 10%)' : null\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-vis\",\n      onClick: () => setRenderDescription(!renderDescription),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-title\",\n          children: [job.title, \" \\u2022 \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: job.company.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-location\",\n          children: [job.citiesString, \" \\u2022 \", new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"2-digit\"\n          }).format(job.postedAt)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), renderDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-description-title\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: job.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobTab, \"4qp44s4RXt/U81//4K7wJ2TVkpw=\");\n\n_c = JobTab;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      e.preventDefault();\n      this.setState({\n        locationSearch: e.target.value\n      }, () => {\n        if (this.state.locationSearch === '') {\n          this.debouncedSetDisplayedJobs(this.state.jobs); // this.setState({ displayedJobs: this.state.jobs });\n        } else {\n          const filteredJobs = this.state.jobs.filter(job => job.citiesString.toLowerCase().includes(e.target.value));\n          this.debouncedSetDisplayedJobs(filteredJobs); // this.setState({ displayedJobs: filteredJobs });\n        }\n      });\n    };\n\n    this.state = {\n      jobs: [],\n      displayedJobs: [],\n      locationSearch: '',\n      jobsLoaded: false\n    };\n    this.debouncedSetDisplayedJobs = debounce(jobs => {\n      this.setState({\n        displayedJobs: jobs\n      });\n    }, 150);\n  }\n\n  componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    fetch(url, opts).then(res => res.json()).then(({\n      data\n    }) => {\n      let jobs = cleanData(data.jobs);\n      jobs = sortJobsByRecentDate(jobs);\n      this.setState({\n        jobs,\n        displayedJobs: jobs,\n        jobsLoaded: true\n      });\n    }).catch(console.error);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Walmart AngelList\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-filters\",\n          children: [\"Search jobs by city \", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"job-location-search\",\n            value: this.state.locationSearch,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"open-positions\",\n          children: \"Open Positions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-content\",\n          children: this.state.displayedJobs.length !== 0 || this.state.jobsLoaded ? this.state.displayedJobs.map(job => /*#__PURE__*/_jsxDEV(JobTab, {\n            job: job,\n            jobs: this.state.jobs\n          }, job.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 51\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loader\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; // Helpers\n\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"JobTab\");","map":{"version":3,"sources":["/Users/imdyangs/projects/shogun/src/App.js"],"names":["React","useState","ReactMarkdown","url","query","cleanData","jobs","map","job","cities","length","citiesString","name","city","join","postedAt","Date","sortJobsByRecentDate","sort","a","b","sortJobsByCity","JobTab","renderDescription","setRenderDescription","backgroundColor","title","company","Intl","DateTimeFormat","year","month","day","format","description","App","Component","constructor","handleChange","e","preventDefault","setState","locationSearch","target","value","state","debouncedSetDisplayedJobs","filteredJobs","filter","toLowerCase","includes","displayedJobs","jobsLoaded","debounce","componentDidMount","opts","method","headers","body","JSON","stringify","fetch","then","res","json","data","catch","console","error","render","id","func","wait","timeout","args","context","clearTimeout","setTimeout","apply"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport './App.css';\n\nconst url = \"https://api.graphql.jobs/\"\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\"\n    }\n    else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    }\n    else {\n      job.cities = job.cities.map(city => city.name)\n      job.citiesString = job.cities.join(\" â€¢ \")\n    }\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  })\n}\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  })\n}\n\nconst sortJobsByCity = jobs => {\n  return jobs.sort((a, b) => {\n    return a.citiesString - b.citiesString;\n  })\n}\n\nconst JobTab = ({ job, jobs }) => {\n  const [renderDescription, setRenderDescription] = useState(false);\n  return (\n    <div className=\"job-tab\" style={{ backgroundColor: renderDescription ? 'rgb(131 130 140 / 10%)' : null }}>\n      <div className=\"job-vis\" onClick={() => setRenderDescription(!renderDescription)}>\n        <div className=\"job-header\">\n        <div className=\"job-title\">\n          {job.title} â€¢ <b>{job.company.name}</b>\n        </div>\n        <div className=\"job-location\">\n          {job.citiesString} â€¢ {new Intl.DateTimeFormat(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"2-digit\"\n          }).format(job.postedAt)}\n        </div>\n      </div>\n       { renderDescription ?\n        <div className=\"job-description\">\n          <div className=\"job-description-title\">Description</div>\n          <ReactMarkdown>\n            {job.description}\n          </ReactMarkdown>\n          <div className=\"job-contact\">\n            {/* todo */}\n          </div>\n        </div> :\n        null\n       }\n    </div>\n  </div>\n)}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [],\n      displayedJobs: [],\n      locationSearch: '',\n      jobsLoaded: false,\n    }\n    this.debouncedSetDisplayedJobs = debounce(jobs => {\n      this.setState({ displayedJobs: jobs })\n    }, 150);\n  }\n\n  componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    };\n\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(({ data }) => {\n        let jobs = cleanData(data.jobs);\n        jobs = sortJobsByRecentDate(jobs);\n        this.setState({ jobs, displayedJobs: jobs, jobsLoaded: true });\n      })\n      .catch(console.error);\n  }\n\n  handleChange = e => {\n    e.preventDefault();\n\n    this.setState({ locationSearch: e.target.value }, () => {\n      if (this.state.locationSearch === '') {\n        this.debouncedSetDisplayedJobs(this.state.jobs)\n        // this.setState({ displayedJobs: this.state.jobs });\n      } else {\n        const filteredJobs = this.state.jobs.filter(job => job.citiesString.toLowerCase().includes(e.target.value));\n        this.debouncedSetDisplayedJobs(filteredJobs)\n        // this.setState({ displayedJobs: filteredJobs });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"title\">\n            Walmart AngelList\n          </div>\n          <div className=\"job-filters\">\n            Search jobs by city {\" \"}\n            <input className=\"job-location-search\" value={this.state.locationSearch} onChange={this.handleChange} />\n          </div>\n          <div className=\"open-positions\">\n            Open Positions\n          </div>\n          <div className=\"job-content\">\n             { this.state.displayedJobs.length !== 0 || this.state.jobsLoaded ?\n              this.state.displayedJobs.map(job => <JobTab key={job.id} job={job} jobs={this.state.jobs} />) :\n              <div className=\"loader\" /> }\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// Helpers\nfunction debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}