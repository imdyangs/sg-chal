{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/imdyangs/projects/shogun/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './App.css';\nconst url = \"https://api.graphql.jobs/\";\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`;\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\";\n    } else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    } else {\n      job.cities = job.cities.map(city => city.name);\n      job.citiesString = job.cities.join(\" â€¢ \");\n    }\n\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  });\n};\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  });\n};\n\nconst JobTab = ({\n  job,\n  jobs\n}) => {\n  _s();\n\n  const [renderDescription, setRenderDescription] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"job-tab\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-vis\",\n      onClick: () => setRenderDescription(!renderDescription),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-title\",\n          children: [job.title, \" \\u2022 \", job.company.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-location\",\n          children: [job.citiesString, \" \\u2022 \", new Intl.DateTimeFormat(\"en-GB\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"2-digit\"\n          }).format(job.postedAt)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), renderDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-description\",\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: job.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobTab, \"4qp44s4RXt/U81//4K7wJ2TVkpw=\");\n\n_c = JobTab;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: []\n    };\n  }\n\n  async componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    fetch(url, opts).then(res => res.json()).then(({\n      data\n    }) => {\n      let jobs = cleanData(data.jobs);\n      jobs = sortJobsByRecentDate(jobs);\n      this.setState({\n        jobs\n      });\n    }).catch(console.error);\n  }\n\n  render() {\n    console.log(this.state.jobs[0]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-content\",\n          children: this.state.jobs.length !== 0 ? this.state.jobs.map(job => /*#__PURE__*/_jsxDEV(JobTab, {\n            job: job,\n            jobs: this.state.jobs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 42\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobTab\");","map":{"version":3,"sources":["/Users/imdyangs/projects/shogun/src/App.js"],"names":["React","useState","ReactMarkdown","url","query","cleanData","jobs","map","job","cities","length","citiesString","name","city","join","postedAt","Date","sortJobsByRecentDate","sort","a","b","JobTab","renderDescription","setRenderDescription","title","company","Intl","DateTimeFormat","year","month","day","format","description","App","Component","constructor","state","componentDidMount","opts","method","headers","body","JSON","stringify","fetch","then","res","json","data","setState","catch","console","error","render","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport './App.css';\n\nconst url = \"https://api.graphql.jobs/\"\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\"\n    }\n    else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    }\n    else {\n      job.cities = job.cities.map(city => city.name)\n      job.citiesString = job.cities.join(\" â€¢ \")\n    }\n    job.postedAt = new Date(job.postedAt);\n    return job;\n  })\n}\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  })\n}\n\nconst JobTab = ({ job, jobs }) => {\n  const [renderDescription, setRenderDescription] = useState(false);\n  return (\n    <div className=\"job-tab\">\n      <div className=\"job-vis\" onClick={() => setRenderDescription(!renderDescription)}>\n        <div className=\"job-header\">\n        <div className=\"job-title\">\n          {job.title} â€¢ {job.company.name}\n        </div>\n        <div className=\"job-location\">\n          {job.citiesString} â€¢ {new Intl.DateTimeFormat(\"en-GB\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"2-digit\"\n          }).format(job.postedAt)}\n        </div>\n      </div>\n       { renderDescription ?\n        <div className=\"job-description\">\n          <ReactMarkdown>\n            {job.description}\n          </ReactMarkdown>\n        </div> :\n        null\n       }\n    </div>\n  </div>\n)}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [],\n    }\n  }\n\n  async componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    };\n\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(({ data }) => {\n        let jobs = cleanData(data.jobs);\n        jobs = sortJobsByRecentDate(jobs);\n        this.setState({ jobs });\n      })\n      .catch(console.error);\n  }\n\n  render() {\n    console.log(this.state.jobs[0])\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"title\">\n            Jobs\n          </div>\n          <div className=\"job-content\">\n             { this.state.jobs.length !== 0 ?\n              this.state.jobs.map(job => <JobTab job={job} jobs={this.state.jobs} />) : null }\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}