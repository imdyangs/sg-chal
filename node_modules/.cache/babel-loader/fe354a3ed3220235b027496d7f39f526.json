{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/imdyangs/projects/shogun/src/App.js\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './App.css';\nconst url = \"https://api.graphql.jobs/\";\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`;\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\";\n    } else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    } else {\n      job.cities = job.cities.map(city => city.name);\n      job.citiesString = job.cities.join(\" • \");\n    }\n\n    job.postedAt = new Date(job.postedAt);\n    job.showDescription = false;\n    return job;\n  });\n};\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  });\n};\n\nclass JobTab extends React.Component {\n  render() {\n    console.log(jobs.filter(x => x.id === job.id));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-tab\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-vis\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-title\",\n            children: [job.title, \" \\u2022 \", job.company.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-location\",\n            children: [job.citiesString, \" \\u2022 \", new Intl.DateTimeFormat(\"en-GB\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"2-digit\"\n            }).format(job.postedAt)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: []\n    };\n  }\n\n  async componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    fetch(url, opts).then(res => res.json()).then(({\n      data\n    }) => {\n      let jobs = cleanData(data.jobs);\n      jobs = sortJobsByRecentDate(jobs);\n      this.setState({\n        jobs\n      });\n    }).catch(console.error);\n  }\n\n  render() {\n    console.log(this.state.jobs[0]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-content\",\n          children: this.state.jobs.length !== 0 ? this.state.jobs.map(job => /*#__PURE__*/_jsxDEV(JobTab, {\n            job: job,\n            jobs: this.state.jobs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 42\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/imdyangs/projects/shogun/src/App.js"],"names":["React","ReactMarkdown","url","query","cleanData","jobs","map","job","cities","length","citiesString","name","city","join","postedAt","Date","showDescription","sortJobsByRecentDate","sort","a","b","JobTab","Component","render","console","log","filter","x","id","title","company","Intl","DateTimeFormat","year","month","day","format","App","constructor","state","componentDidMount","opts","method","headers","body","JSON","stringify","fetch","then","res","json","data","setState","catch","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport './App.css';\n\nconst url = \"https://api.graphql.jobs/\"\nconst query = `\n  query {\n    jobs {\n      id\n      title\n      cities {\n        name\n        id\n      }\n      description\n      company {\n        id\n        name\n        websiteUrl\n      }\n      postedAt\n    }\n  }\n`\n\nconst cleanData = jobs => {\n  return jobs.map(job => {\n    if (job.cities.length === 0) {\n      job.cities[0] = 'NO_CITY';\n      job.citiesString = \"Remote / No Location\"\n    }\n    else if (job.cities.length === 1) {\n      job.cities = [job.cities[0].name];\n      job.citiesString = job.cities[0];\n    }\n    else {\n      job.cities = job.cities.map(city => city.name)\n      job.citiesString = job.cities.join(\" • \")\n    }\n    job.postedAt = new Date(job.postedAt);\n    job.showDescription = false;\n    return job;\n  })\n}\n\nconst sortJobsByRecentDate = jobs => {\n  return jobs.sort((a, b) => {\n    return b.postedAt - a.postedAt;\n  })\n}\n\nclass JobTab extends React.Component {\n  render () {\n    console.log(jobs.filter(x => x.id === job.id))\n    return (\n      <div className=\"job-tab\">\n        <div className=\"job-vis\">\n          <div className=\"job-header\">\n          <div className=\"job-title\">\n            {job.title} • {job.company.name}\n          </div>\n          <div className=\"job-location\">\n            {job.citiesString} • {new Intl.DateTimeFormat(\"en-GB\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"2-digit\"\n            }).format(job.postedAt)}\n          </div>\n        </div>\n        {/* { this.state.jobs.filter(x => x.id === job.id).showDescription ?\n          <div className=\"job-description\">\n            <ReactMarkdown>\n              {job.description}\n            </ReactMarkdown>\n          </div> :\n          null\n        } */}\n      </div>\n    </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobs: [],\n    }\n  }\n\n  async componentDidMount() {\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    };\n\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(({ data }) => {\n        let jobs = cleanData(data.jobs);\n        jobs = sortJobsByRecentDate(jobs);\n        this.setState({ jobs });\n      })\n      .catch(console.error);\n  }\n\n  render() {\n    console.log(this.state.jobs[0])\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <div className=\"title\">\n            Jobs\n          </div>\n          <div className=\"job-content\">\n             { this.state.jobs.length !== 0 ?\n              this.state.jobs.map(job => <JobTab job={job} jobs={this.state.jobs} />) : null }\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}